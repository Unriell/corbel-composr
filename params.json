{
  "name": "corbel-composr",
  "tagline": "A corbel middleware based in nodeJS",
  "body": "<p align=\"center\"><img align=\"center\" src=\"https://raw.githubusercontent.com/corbel-platform/corbel-composr/master/img/logo.png\" width=\"200\"></p>\r\n\r\n#Composr\r\n\r\n[![Build Status](https://api.travis-ci.org/corbel-platform/corbel-composr.png?branch=master)](http://travis-ci.org/corbel-platform/corbel-composr)\r\n[![npm version](https://badge.fury.io/js/corbel-composr.svg)](http://badge.fury.io/js/corbel-composr)\r\n[![Dependency status](https://david-dm.org/corbel-platform/corbel-composr/status.png)](https://david-dm.org/corbel-platform/corbel-composr#info=dependencies&view=table)\r\n[![Dev Dependency Status](https://david-dm.org/corbel-platform/corbel-composr/dev-status.png)](https://david-dm.org/corbel-platform/corbel-composr#info=devDependencies&view=table)\r\n[![Coverage Status](https://coveralls.io/repos/corbel-platform/corbel-composr/badge.svg?branch=master)](https://coveralls.io/r/corbel-platform/corbel-composr?branch=master)\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\r\n[![Code Climate](https://codeclimate.com/github/corbel-platform/corbel-composr/badges/gpa.svg)](https://codeclimate.com/github/corbel-platform/corbel-composr)\r\n[![Test Coverage](https://codeclimate.com/github/corbel-platform/corbel-composr/badges/coverage.svg)](https://codeclimate.com/github/corbel-platform/corbel-composr/coverage)\r\n\r\n<p align=\"center\"><img  src=\"https://cdn.rawgit.com/feross/standard/master/badge.svg\" width=\"150\"></p>\r\n\r\n\r\n## [Homepage](http://corbel-platform.github.io/corbel-composr)\r\n\r\n## Overview\r\n\r\nComposr is a [nodeJS](https://nodejs.org/api/) opinionated server for executing dinamically created endpoints, it's original purpose is to serve as a middleware for the [Corbel - microservices generic backend - ][corbel-link], but it's capabilities are growing.\r\n\r\nIt uses the [composr-core](https://github.com/bq/composr-core) API for executing random pieces of code that the developers pushes to the Composr API.\r\nThis random pieces of code, called **Phrases** or **Snippets** are model definitions for endpoints and reusable utilities. \r\n\r\n\r\n## Features\r\n\r\n- Enable/disable endpoints in runtime dynamically!\r\n- Built in PM2 configuration for cluster mode\r\n- Bunyan Access logs\r\n- Winston Logs (debug, info, warn, error)\r\n- Autogenerated API documentation\r\n- RabbitMQ communication for endpoints updates\r\n- Status and Healthcheck endpoints\r\n- Keymetrics and Newrelic integration\r\n- Docker Ready!\r\n- Configurable middlewares for each endpoint\r\n  + Mock: It mocks the response of the endpoint with an autogenerated object\r\n  + Validate: It validates the input object schema for POST/PUT requests\r\n  + Auth Middlewares: Ensures that the endpoint receives a Corbel Auth Token\r\n  + ...\r\n- [Corbel][corbel-link] ready, thanks to [Corbel-js](https://github.com/bq/corbel-js)\r\n\r\n\r\n## QuickStart\r\n\r\n- install\r\n\r\n  ```\r\n  npm install -g corbel-platform/corbel-composr\r\n  ```\r\n\r\n- run server\r\n\r\n  ```\r\n  corbel-composr\r\n  ```\r\n\r\n## Configuration\r\n\r\nYou can send the following environment variables (or define a environment config file under `src/config/[ENV].json`).\r\n\r\n### Default config file\r\n\r\n```\r\n{\r\n    \"serverName\" : \"CompoSR\",\r\n    \"bodylimit\" : \"50mb\",\r\n    \"port\": 3000,\r\n    \r\n    \"rabbitmq.host\": \"RABBIT_HOST\",\r\n    \"rabbitmq.port\": \"RABBIT_PORT\",\r\n    \"rabbitmq.username\": \"RABBIT_USERNAME\",\r\n    \"rabbitmq.password\": \"RABBIT_PASSWORD\",\r\n    \"rabbitmq.reconntimeout\": 10000,\r\n    \"rabbitmq.event\": \"class io.corbel.event.ResourceEvent\",\r\n    \"rabbitmq.forceconnect\": false,\r\n    \"rabbitmq.heartbeat\" : 30,\r\n\r\n    \"bootstrap.retrytimeout\": 10000,\r\n\r\n    \"phrases.timeout\": 40000,\r\n\r\n    \"services.timeout\": 5000,\r\n    \"services.retries\": 30,\r\n    \"services.time\": 1000,\r\n\r\n    \"corbel.composr.credentials\": {\r\n        \"clientId\": \"CLIENT_ID\",\r\n        \"clientSecret\": \"CLIENT_SECRET\",\r\n        \"scopes\": \"composr:comp:base\"\r\n    },\r\n\r\n    \"corbel.driver.options\": {\r\n        \"urlBase\": \"https://{{module}}corbel-domain.io/\"\r\n    },\r\n\r\n    \"bunyan.log\" : true,\r\n    \"bunyan.syslog\" : true,\r\n    \"bunyan.stdout\": false,\r\n    \"bunyan.streamServer\": false,\r\n\r\n    \"composrLog.accessLog\" : true,\r\n    \"composrLog.accessLogFile\" : \"logs/access.log\",\r\n    \"composrLog.logLevel\": \"error\",\r\n    \"composrLog.logFile\": \"logs/composr.log\",\r\n    \"composrLog.syslog\" : false,\r\n\r\n    \"newrelic\" : false,\r\n    \"newrelic.name\": \"\",\r\n    \"newrelic.key\": \"\",\r\n\r\n    \"keymetrics\": true\r\n}\r\n\r\n```\r\n\r\nAlmost all of the vales in the configuration file can be overwriten by environment variables, this can be useful if you use **Docker**, **Travis** or any other tool that could send environment variables to configure your server. \r\n\r\n### Environment variables\r\n\r\n```\r\nSERVER_NAME (Composr 2.0)\r\nPORT (3000)\r\nCREDENTIALS_CLIENT_ID\r\nCREDENTIALS_CLIENT_SECRET\r\nCREDENTIALS_SCOPES\r\nURL_BASE\r\nACCESS_LOG => winston access log\r\nACCESS_LOG_FILE => winston access log file\r\nLOG_LEVEL => winston log level\r\nLOG_FILE => winston log file\r\nBUNYAN_LOG(true) => Bunyan logs\r\nBUNYAN_SYSLOG(true) => Send bunyan stream to syslog (127.0.0.1:514)\r\nBUNYAN_STDOUT(false) => Bunyan output in terminal\r\nBUNYAN_STREAM_SERVER (null) => Composr Stream Server endpoint\r\nRABBITMQ_HOST\r\nRABBITMQ_PORT\r\nRABBITMQ_USERNAME\r\nRABBITMQ_PASSWORD\r\nRABBITMQ_FORCE_CONNECT => Only launch composr if rabbit is connected\r\nRABBITMQ_HEARTBEAT => Heartbeat for the rabbitmq connection\r\nSERVICES_TIMEOUT\r\nSERVIES_RETRIES\r\nSERVICES_TIME \r\nKEYMETRICS (true) => Keymetrics active\r\nNRACTIVE => New relic active\r\nNRAPPNAME => New relic app name\r\nNRAPIKEY => New relic api key\r\n```\r\n\r\n## Creating your endpoints:\r\n\r\n[What are Phrases or Snippets?](https://github.com/corbel-platform/composr-core/wiki/Phrases)\r\n\r\nYou can generate and publish your phrases and snippets by using [composr-cli](https://github.com/corbel-platform/composr-cli). *Currently under development*\r\n\r\n\r\n### Routing endpoints\r\n\r\nCorbel-Composr has a similar routing mechanism than restify. You can define urls by following this conventions:\r\n\r\n- `:param` : Url parameter\r\n- `user` : Fixed path value\r\n\r\nSome examples\r\n\r\n- `user/:userId`\r\n- `user/status/:parameter`\r\n- `thing/one`\r\n\r\n```json\r\n{\r\n    \"url\": \"paramsExample/:pathparam\",\r\n    \"get\": {\r\n        \"code\": \"res.status(200).send('path param: ' + req.params.pathparam + ',  query param: ' + req.query.queryparam);\"\r\n    },\r\n    \"post\": {\r\n       /*...*/\r\n    },\r\n    \"put\": {\r\n       /*...*/\r\n    }\r\n}\r\n```\r\n\r\n### Versioning your endpoints\r\n\r\nComposr can take care of multiple endpoints and multiple versions for each endpoint. It uses the semantic versioning for executing different code for each endpoint. \r\n\r\nFor example, if you published the following phrases to Composr:\r\n\r\n```\r\n{\r\n    \"url\": \"user/:userId\",\r\n    \"version\": \"3.1.0\",\r\n    \"get\": { ... }\r\n}\r\n\r\n{\r\n    \"url\": \"user/:userId\",\r\n    \"version\": \"4.0.0\",\r\n    \"get\": { ... }\r\n}\r\n```\r\n\r\nThen you could request executing the `3.x` version by sending the `Accept-Version` header with a `~3` value, as seen in [restify](http://restify.com/).\r\n\r\n### Documentation\r\n\r\nComposr autogenerates documentation when navigating to `http://localhost:3000/my:domain/doc`. The documentation is generated by fulfilling the example documents that `composr-cli` creates when generating a phrase model.\r\n\r\nSee an example:\r\n![documentation example](https://raw.githubusercontent.com/corbel-platform/corbel-composr/master/img/example-doc.png)\r\n\r\n## Logs\r\n\r\n**Composr** is shipped with built-in **bunyan** and **winston** support.\r\n\r\n### Winston logs:\r\n\r\nYou can set `logFile` and `logLevel` in your config file.\r\n\r\nAvailable log levels can be found at [winston's npm page](https://www.npmjs.com/package/winston#logging-levels):\r\n- debug\r\n- info\r\n- warn\r\n- error\r\n\r\n### Bunyan Logs:\r\n\r\nBunyan logs are enabled by default. You can disable them by turning `bunyan.log` to `false` in your configuration.\r\n\r\n\r\n## Tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n\r\n### Coverage\r\n\r\n```\r\nnpm run coverage\r\n```\r\n\r\n\r\n### Debug\r\n\r\nRequires [node-inspector](https://github.com/node-inspector/node-inspector)\r\n```\r\nnpm install -g node-inspector\r\n```\r\n\r\n* Server\r\n\r\n  ```\r\n  npm run debug --myphrase.get\r\n  ```\r\n\r\n* Tests\r\n\r\n  ```\r\n  npm run test:debug\r\n  ```\r\n\r\n\r\n## Run in a docker container\r\n\r\n- clone repo\r\n- build image\r\n\r\n  ```\r\n  docker build -t <username>/corbel-composr .\r\n  ```\r\n\r\n- run container\r\n\r\n  ```\r\n  docker run -d -p 3000:3000 --name=\"corbel-composr\"  <username>/corbel-composr\r\n  ```\r\n\r\n- start/stop container\r\n\r\n  ```\r\n  docker start/stop corbel-composr\r\n  ```\r\n\r\n\r\n[corbel-link]: https://github.com/bq/corbel\r\n\r\n## Reference\r\n\r\n* [composr-core](https://github.com/corbel-platform/composr-core)\r\n* [corbel-js](https://github.com/corbel-platform/corbel-js) API\r\n* [RAML](http://raml.org/) for phrase definition\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}