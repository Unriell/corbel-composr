{"name":"corbel-composr","tagline":"A corbel middleware based in nodeJS","body":"# corbel composer\r\n\r\n[![Build Status](https://api.travis-ci.org/bq/corbel-composer.png?branch=master)](http://travis-ci.org/bq/corbel-composer)\r\n[![npm version](https://badge.fury.io/js/corbel-composer.svg)](http://badge.fury.io/js/corbel-composer)\r\n[![Dependency status](https://david-dm.org/bq/corbel-composer/status.png)](https://david-dm.org/bq/corbel-composer#info=dependencies&view=table)\r\n[![Dev Dependency Status](https://david-dm.org/bq/corbel-composer/dev-status.png)](https://david-dm.org/bq/corbel-composer#info=devDependencies&view=table)\r\n[![Coverage Status](https://coveralls.io/repos/bq/corbel-composer/badge.svg?branch=master)](https://coveralls.io/r/bq/corbel-composer?branch=master)\r\n\r\nA corbel-composer is a middleware based in [nodeJS](https://nodejs.org/api/) with [express](http://expressjs.com/4x/api.html), to offer developers to make his own specific application API bsed in [corbel-js](https://github.com/bq/corbel-js)\r\n\r\n## [Homepage](http://opensource.bq.com/corbel-js/)\r\n\r\n\r\n## Overview\r\n\r\n[text]\r\n\r\n### Diagram\r\n\r\n[image]\r\n\r\n\r\n## QuickStart\r\n\r\n- install\r\n\r\n  ```\r\n  npm install -g bq/corbel-composer\r\n  ```\r\n\r\n- run server\r\n  \r\n  ```\r\n  corbel-composer\r\n  ```\r\n\r\n\r\n## Postman Playground\r\n\r\n1. Get [postman](https://www.getpostman.com/)\r\n2. Import corbel-composer collection:\r\n\r\n  ```\r\n  https://raw.githubusercontent.com/bq/corbel-composer/master/doc/postman.json\r\n  ```\r\n3. Enjoy!\r\n\r\n\r\n## Phrase Model\r\n\r\n```\r\n{\r\n  \"url\": \"phraseName\",\r\n  \"get\": {\r\n    \"code\": \"res.render('index', {title: 'hello world'});\",\r\n    \"description\": \"Phrase description\",\r\n    \"query\": {\r\n      \"param1\": {\r\n        \"type\": \"Number\",\r\n        \"description\": \"Param description\",\r\n        \"default\": 0\r\n      }\r\n    },\r\n    \"responses\": {\r\n      \"200\": {\r\n        \"body\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"type\": \"object\",\r\n              \"description\": \"A canonical song\",\r\n              \"properties\": {\r\n                \"title\": {\r\n                  \"type\": \"String\"\r\n                },\r\n                \"artist\": {\r\n                  \"type\": \"String\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"title\",\r\n                \"artist\"\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Example Phrases\r\n\r\n### `count` value in collections query\r\n\r\n```json\r\n{\r\n    \"url\": \"countExample\",\r\n    \"get\": {\r\n        \"code\": \"CORBEL-JS_SNIPPET\"\r\n    }\r\n}\r\n```\r\n\r\nwhere `code` should be a string with this [corbel-js](https://github.com/bq/corbel-js) snippet:\r\n\r\n```javascript\r\nvar count;\r\ncorbelDriver.resources.collection('test:ComposrTest').get(undefined, {\r\n    aggregation: {\r\n        $count: '*'\r\n    }\r\n}).then(function(response) {\r\n    count = response.data.count;\r\n    return corbelDriver.resources.collection('test:ComposrTest').get();\r\n}).then(function(response) {\r\n    res.send({\r\n        data: response.data,\r\n        'count': count\r\n    });\r\n}).catch(function(error) {\r\n    res.send(error);\r\n});\r\n```\r\n\r\n### Path & query parameters\r\n\r\n```json\r\n{\r\n    \"url\": \"paramsExample/:pathparam\",\r\n    \"get\": {\r\n        \"code\": \"res.status(200).send('path param: ' + req.params.pathparam + ',  query param: ' + req.query.queryparam);\"\r\n    }\r\n}\r\n```\r\n\r\n## Reference\r\n\r\n* [corbel-js](https://github.com/bq/corbel-js) API\r\n* [Request object](http://expressjs.com/4x/api.html#req)\r\n* [Response object](http://expressjs.com/4x/api.html#res)\r\n* [RAML](http://raml.org/) for phrase definition\r\n\r\n## API design best practices\r\n\r\n### Naming\r\n\r\n* Use nouns not verbs\r\n* Use plural nouns\r\n\r\n| Resource     | GET (read)             | POST (create)            | PUT (update)                | DELETE                    |\r\n| ------------ | ---------------------- | ------------------------ | --------------------------- | ------------------------- |\r\n| /cars        | Returns a list of cars | Create a new ticket      | Bulk update of cars         | Delete all cars           |\r\n| /cars/711    | Returns a specific car | Method not allowed (405) | Updates a specific ticket   | Deletes a specific ticket |\r\n| /purchase    | Get al purchases       | Create a new purchase    | Bulk update of purschases   | Delete all purchases      |\r\n| /purchase/85 | Returns a purchase     | Method not allowed (405) | Updates a specific purchase | Delete all purchases      |\r\n\r\n\r\nResource  GET\r\nread  POST\r\ncreate  PUT\r\nupdate  DELETE\r\n/cars Returns a list of cars  Create a new ticket Bulk update of cars Delete all cars\r\n/cars/711 Returns a specific car  Method not allowed (405)   Deletes a specific ticket\r\n\r\n### Versioning your phrases\r\n\r\nA simple way to achieve this is definning the phrase version in the url, like this\r\n\r\n```\r\n{\r\n    \"url\": \"v1/paramsExample/:pathparam\",\r\n    \"get\": { ... }\r\n}\r\n```\r\n\r\nA phrase version should change only if the phrase contract is broken\r\n\r\n\r\n### Reference\r\n\r\n* [APIgee](http://apigee.com/about/resources/ebooks/web-api-design)\r\n* [Principios de dise√±o de APIs REST](https://leanpub.com/introduccion_apis_rest)\r\n* [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#versioning)\r\n* [REST API Resoruces](http://www.restapitutorial.com/resources.html)\r\n\r\n## Run in a docker container\r\n\r\n- clone repo\r\n- build image\r\n\r\n  ```\r\n  docker build -t <username>/corbel-composer .\r\n  ```\r\n\r\n- run container\r\n\r\n  ```\r\n  docker run -d -p 3000:3000 --name=\"corbel-composer\"  <username>/corbel-composer\r\n  ```\r\n- start/stop container\r\n\r\n  ```\r\n  docker start/stop corbel-composer\r\n  ```\r\n\r\n\r\n## Tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n\r\n## Coverage\r\n\r\n```\r\ngrunt test:coverage\r\n```\r\n\r\n\r\n## Debug\r\n\r\nRequires [node-inspector](https://github.com/node-inspector/node-inspector)\r\n```\r\nnpm install -g node-inspector\r\n```\r\n\r\n* Server\r\n\r\n  ```\r\n  npm run debug\r\n  ```\r\n\r\n* Tests\r\n\r\n  ```\r\n  npm run test:debug\r\n  ```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}